---
# yamllint disable rule:line-length
name: run tests and coverage

# yamllint disable-line rule:truthy
on: [push, pull_request]

jobs:

  run-tests:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        container:
          - 'shivupa/cclib-ci:py38-edge'
          - 'shivupa/cclib-ci:py39-edge'
          - 'shivupa/cclib-ci:py310-edge'
          - 'shivupa/cclib-ci:py311-edge'
    container:
      image: ${{ matrix.container }}
    defaults:
      run:
        shell: bash -eo pipefail -l {0}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # so versioningit can figure out the version
          fetch-depth: 0
          fetch-tags: true
      - name: Allow repo access (see https://github.com/actions/checkout/issues/760)
        run: |
          git config --global --add safe.directory /__w/cclib/cclib
      - name: Prepare conda environment
        run: |
          echo "/opt/conda/envs/cclib/bin" >> $GITHUB_PATH
      - name: Install cclib
        run: |
          python -m pip install .
      - name: Filter code
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            methods:
              - 'cclib/cclib/method/**'
      - name: Test core code with pytest
        run: |
          env | sort
          bash .github/scripts/run_pytest.bash 2
      - name: Test methods with pytest
        if: steps.filter.outputs.methods == 'true'
        run: |
          bash .github/scripts/run_pytest_methods.bash 2
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage-unit.xml,./coverage-regression.xml,./coverage-method.xml
          name: codecov-cclib
          fail_ci_if_error: true
          verbose: false
        if: matrix.container == 'shivupa/cclib-ci:py311-edge'
      - name: Install pypa/build
        run: |
          python -m pip install build
      - name: Build distribution packages (binary wheel and source tarball)
        run: |
          python -m build
      - name: Check packages with twine
        run: |
          python -m pip install twine
          python -m twine check dist/*
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
        if: matrix.container == 'shivupa/cclib-ci:py311-edge'

  check-installation:
    needs:
      - run-tests
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        install-method: [wheel, source]
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Download the distribution packages
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Update environment
        run: |
          python -m pip install -U setuptools pip
      - name: Install cclib (wheel)
        run: |
          python -m pip install dist/*.whl
        if: matrix.install-method == 'wheel'
      - name: Install cclib (source)
        run: |
          python -m pip install dist/*.tar.gz
        if: matrix.install-method == 'source'
      - name: Check cclib install
        run: |
          cd ~
          python -c 'import cclib; print(cclib.__version__)'
          python -c 'from cclib.io import ccread; data = ccread("https://raw.githubusercontent.com/cclib/cclib-data/master/Gaussian/Gaussian16/water.log"); print(data.zpve)'

  # Taken from
  # https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/,
  # where building the distribution happens every commit after running the
  # tests

  publish-to-testpypi:
    name: Publish Python distribution to TestPyPI
    needs:
      - check-installation
    runs-on: ubuntu-22.04
    environment:
      name: testpypi
      url: https://test.pypi.org/p/cclib
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  publish-to-pypi:
    name: Publish Python distribution to PyPI
    needs:
      - check-installation
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    runs-on: ubuntu-22.04
    environment:
      name: pypi
      url: https://pypi.org/p/cclib
    permissions:
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: >-
      Sign the Python distribution with Sigstore
      and upload them to GitHub Release
    needs:
      - publish-to-pypi
    runs-on: ubuntu-22.04
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v1.2.3
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        '${{ github.ref_name }}'
        --repo '${{ github.repository }}'
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'
